#!/bin/bash

# --- MiXCR Paired Analysis Shell Script (v3.x Workflow) ---
# This script performs separate analysis and assembly for TRA and TRB chains,
# saves original read information, and exports alignment details including
# original FASTQ headers for external pairing.
# Results are saved to a new, dedicated directory.
# Corrected filenames based on observed MiXCR v3.0.13 output.
# Added -f flag to assemble steps to force overwrite existing files.

# --- Configuration ---
# MiXCR jar file path (modify if needed)
MIXCR_JAR="/home/u1925021001/why/TCR/cx20250120/mixcr-3.0.13/mixcr.jar"

# Directory containing matched FASTQ files (modify if needed)
INPUT_DIR="matched_fastq_output"

# Prefix for matched FASTQ files (modify if needed)
PREFIX="TCR_TSO_18_matched"

# *** NEW dedicated output directory for this paired analysis *** (modify if needed)
# Named after this script but under the common results folder
OUTPUT_DIR="PairTCR_results/3_run_mixcr_and_export_output"

# Number of threads to use
THREADS=90

# --- Define Expected Filenames Based on Observed Output ---
# Note: MiXCR v3.0.13 seems to append extensions to the provided output name
TRA_VDJCA_OUTPUT="${OUTPUT_DIR}/TRA.vdjca.vdjca" # Actual alignment file
TRB_VDJCA_OUTPUT="${OUTPUT_DIR}/TRB.vdjca.vdjca" # Actual alignment file
TRA_CLNS_OUTPUT="${OUTPUT_DIR}/TRA.vdjca.clns"   # Actual clone file (Assemble step output name defines this)
TRB_CLNS_OUTPUT="${OUTPUT_DIR}/TRB.vdjca.clns"   # Actual clone file (Assemble step output name defines this)

# --- Script Body ---

# Exit immediately if a command exits with a non-zero status.
set -e

echo "--- Starting MiXCR Paired Analysis Workflow (v3.0.13 Method) ---"
echo "Results will be saved to: ${OUTPUT_DIR}"

# 1. Create the new output directory
echo "Creating output directory: ${OUTPUT_DIR}"
mkdir -p "${OUTPUT_DIR}"

# 2. Analyze TRA Chain (Saving Original Reads)
# Output name provided is "TRA.vdjca", MiXCR generates "TRA.vdjca.vdjca" etc.
echo "Step 1: Analyzing TRA chain (saving reads)..."
java -jar "${MIXCR_JAR}" analyze amplicon \
    -s hsa \
    --starting-material RNA \
    --5-end no-v-primers \
    --3-end j-primers \
    --adapters no-adapters \
    --report "${OUTPUT_DIR}/TRA_analyze.report.log" \
    -t ${THREADS} \
    --align "-OsaveOriginalReads=true" \
    "${INPUT_DIR}/${PREFIX}_TRA_matched_1.fq.gz" \
    "${INPUT_DIR}/${PREFIX}_TRA_matched_2.fq.gz" \
    "${OUTPUT_DIR}/TRA.vdjca" # Provide base name, MiXCR appends extensions
echo "TRA analysis complete. Expected output base: ${OUTPUT_DIR}/TRA.vdjca"

# 3. Analyze TRB Chain (Saving Original Reads)
# Output name provided is "TRB.vdjca", MiXCR generates "TRB.vdjca.vdjca" etc.
echo "Step 2: Analyzing TRB chain (saving reads)..."
java -jar "${MIXCR_JAR}" analyze amplicon \
    -s hsa \
    --starting-material RNA \
    --5-end no-v-primers \
    --3-end j-primers \
    --adapters no-adapters \
    --report "${OUTPUT_DIR}/TRB_analyze.report.log" \
    -t ${THREADS} \
    --align "-OsaveOriginalReads=true" \
    "${INPUT_DIR}/${PREFIX}_TRB_matched_1.fq.gz" \
    "${INPUT_DIR}/${PREFIX}_TRB_matched_2.fq.gz" \
    "${OUTPUT_DIR}/TRB.vdjca" # Provide base name, MiXCR appends extensions
echo "TRB analysis complete. Expected output base: ${OUTPUT_DIR}/TRB.vdjca"

# 4. Assemble TRA Clones
# Use the *actual* alignment filename generated by Step 2 as input
# The output name here correctly defines the final .clns filename
# Added -f to force overwrite
echo "Step 3: Assembling TRA clones..."
java -jar "${MIXCR_JAR}" assemble \
    -f \
    --report "${OUTPUT_DIR}/TRA_assemble.report.log" \
    "${TRA_VDJCA_OUTPUT}" \
    "${TRA_CLNS_OUTPUT}" # Specify the full desired .clns output name
echo "TRA assembly complete. Output: ${TRA_CLNS_OUTPUT}"

# 5. Assemble TRB Clones
# Use the *actual* alignment filename generated by Step 3 as input
# The output name here correctly defines the final .clns filename
# Added -f to force overwrite
echo "Step 4: Assembling TRB clones..."
java -jar "${MIXCR_JAR}" assemble \
    -f \
    --report "${OUTPUT_DIR}/TRB_assemble.report.log" \
    "${TRB_VDJCA_OUTPUT}" \
    "${TRB_CLNS_OUTPUT}" # Specify the full desired .clns output name
echo "TRB assembly complete. Output: ${TRB_CLNS_OUTPUT}"

# 6. Export Alignment Information (Including Original FASTQ Headers)
# Use the *actual* alignment filenames generated by Steps 2 & 3 as input
# Added -f to force overwrite export files too
echo "Step 5: Exporting alignment info with headers..."

# Export TRA Alignments
java -jar "${MIXCR_JAR}" exportAlignments \
    -f \
    -descrsR1 \
    -vGene \
    -jGene \
    -nFeature CDR3 \
    -aaFeature CDR3 \
    "${TRA_VDJCA_OUTPUT}" \
    "${OUTPUT_DIR}/TRA_alignments_export_with_headers.tsv"
echo "TRA alignment export complete. Output: ${OUTPUT_DIR}/TRA_alignments_export_with_headers.tsv"

# Export TRB Alignments
java -jar "${MIXCR_JAR}" exportAlignments \
    -f \
    -descrsR1 \
    -vGene \
    -jGene \
    -nFeature CDR3 \
    -aaFeature CDR3 \
    "${TRB_VDJCA_OUTPUT}" \
    "${OUTPUT_DIR}/TRB_alignments_export_with_headers.tsv"
echo "TRB alignment export complete. Output: ${OUTPUT_DIR}/TRB_alignments_export_with_headers.tsv"

echo "--- MiXCR Analysis and Export Steps Completed ---"
echo "Next Step (Manual): Perform external pairing using umi_pairs.tsv and the exported TSV files in ${OUTPUT_DIR} with a custom script."


